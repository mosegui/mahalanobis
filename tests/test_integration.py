import pytest
import numpy as np
from mahalanobis import Mahalanobis

class arrays_factory:
    def get_1D_array(self):
        # y = x*(np.random.rand(len(x))-0.5)
        return np.array(
            [
                -0.0,
                0.34295646,
                -0.88598667,
                -0.56622871,
                -1.66973881,
                -2.22362131,
                -2.159349,
                -1.51831888,
                0.0260819,
                3.63353742,
                3.82161576,
                1.78035088,
                -4.11124013,
                -5.03711373,
                -0.06630831,
                0.03729869,
                -1.80491645,
                -2.47153322,
                6.78008604,
                2.24557543,
                9.99494215,
                7.2622585,
                -3.40939432,
                1.30041777,
                5.21927436,
                8.69126001,
                -9.56236032,
                9.97534216,
                -6.39565673,
                9.23736846,
                6.0666296,
                -11.48280422,
                -11.80007737,
                10.27055026,
                -14.65555404,
                11.72575387,
                13.68298596,
                -0.59777696,
                -13.10500669,
                -13.78337608,
                -10.72912663,
                8.27458674,
                -13.25996406,
                17.36900564,
                -19.90475806,
                -2.97447243,
                11.51039279,
                3.76755606,
                20.97843847,
                -12.77193982,
            ]
        )

    def get_nD_array(self):
        # x = np.arange(50)
        # y = 0.05*x**2 + 10*np.random.rand(len(x))-0.5
        dim1 = np.array(
            [
                1.24707662e00,
                8.13229998e00,
                3.94011671e00,
                5.95711000e-02,
                8.19151971e-01,
                2.42683945e00,
                9.82948142e00,
                2.60307426e00,
                3.70308373e00,
                1.18574991e01,
                5.49522144e00,
                1.47371303e01,
                1.42054341e01,
                1.43085060e01,
                1.70986614e01,
                1.72295762e01,
                1.76510457e01,
                2.07641508e01,
                1.65682761e01,
                1.98844646e01,
                2.49628808e01,
                2.31695871e01,
                3.17272266e01,
                3.28116587e01,
                3.03590339e01,
                3.31774992e01,
                3.64844535e01,
                3.79213745e01,
                4.43058815e01,
                4.25157391e01,
                5.12775150e01,
                5.50997437e01,
                5.86550154e01,
                5.90056339e01,
                6.72426047e01,
                6.59205602e01,
                6.97840117e01,
                7.60038959e01,
                8.12967386e01,
                8.36072157e01,
                8.77854012e01,
                8.47615125e01,
                9.03520900e01,
                9.47096869e01,
                1.03496443e02,
                1.01762158e02,
                1.07894466e02,
                1.09683918e02,
                1.22511127e02,
                1.23245054e02,
            ]
        )

        # y = np.sqrt(x) + np.random.rand(len(x))-0.5
        dim2 = np.array(
            [
                -0.31499221,
                1.05671006,
                1.28888535,
                1.77858885,
                1.69954581,
                2.09680701,
                2.35062093,
                2.18256544,
                3.17286042,
                3.41881569,
                3.07845131,
                3.03240567,
                2.97101653,
                3.67681743,
                3.61480066,
                4.09780359,
                3.7228853,
                3.72750352,
                4.3321444,
                4.31290794,
                4.48195774,
                4.52144904,
                4.37120091,
                4.34752525,
                4.59769903,
                4.76832962,
                4.71199936,
                5.27308146,
                4.97553506,
                5.05182084,
                5.18196372,
                5.32240197,
                5.21674972,
                5.48668311,
                6.16344126,
                5.43269478,
                5.59503976,
                6.01893802,
                6.18506432,
                6.70173019,
                6.73045925,
                6.43085774,
                6.90732197,
                6.19020802,
                6.23026284,
                6.30474967,
                6.5228214,
                6.54970738,
                6.6658426,
                7.38755013,
            ]
        )

        # y = x*(np.random.rand(len(x))-0.5)
        dim3 = np.array(
            [
                -0.0,
                0.34295646,
                -0.88598667,
                -0.56622871,
                -1.66973881,
                -2.22362131,
                -2.159349,
                -1.51831888,
                0.0260819,
                3.63353742,
                3.82161576,
                1.78035088,
                -4.11124013,
                -5.03711373,
                -0.06630831,
                0.03729869,
                -1.80491645,
                -2.47153322,
                6.78008604,
                2.24557543,
                9.99494215,
                7.2622585,
                -3.40939432,
                1.30041777,
                5.21927436,
                8.69126001,
                -9.56236032,
                9.97534216,
                -6.39565673,
                9.23736846,
                6.0666296,
                -11.48280422,
                -11.80007737,
                10.27055026,
                -14.65555404,
                11.72575387,
                13.68298596,
                -0.59777696,
                -13.10500669,
                -13.78337608,
                -10.72912663,
                8.27458674,
                -13.25996406,
                17.36900564,
                -19.90475806,
                -2.97447243,
                11.51039279,
                3.76755606,
                20.97843847,
                -12.77193982,
            ]
        )
        return np.vstack((dim1, dim2, dim3)).T

class Test_nD_integration(arrays_factory):
    @pytest.fixture
    def test_instance_nD(self):
        test_instance = Mahalanobis(self.get_nD_array(), 8)
        yield test_instance
        del test_instance

    def test_integration_nD_array(self, test_instance_nD):

        expected_result = [
            7.44539472e-01,
            6.26530367e-01,
            1.32408522e-02,
            4.90331182e-01,
            1.54762131e-01,
            2.33432786e-01,
            6.05263740e-01,
            1.31899469e-01,
            3.23556984e00,
            1.63006804e01,
            1.60402706e01,
            7.50663043e00,
            3.16425617e00,
            4.07050995e00,
            4.85436813e00,
            6.36225803e00,
            2.92924653e00,
            3.69998375e00,
            4.24067946e01,
            1.49623811e01,
            7.36024624e01,
            4.82195639e01,
            9.59845352e00,
            1.62730661e01,
            3.53755198e01,
            6.52122526e01,
            3.07715833e01,
            8.45922097e01,
            2.43462232e01,
            7.70158828e01,
            5.73800180e01,
            6.08063958e01,
            6.88226865e01,
            1.03295649e02,
            9.97161644e01,
            1.25232984e02,
            1.54865127e02,
            6.16298056e01,
            1.12453733e02,
            1.19216745e02,
            1.05218806e02,
            1.23892986e02,
            1.27957512e02,
            2.47856602e02,
            2.42472921e02,
            1.10226428e02,
            1.97767556e02,
            1.41849051e02,
            3.67062769e02,
            2.06812463e02,
        ]

        assert np.allclose(test_instance_nD.distances, expected_result) == True

    def test_integration_external_nD_array(self, test_instance_nD):
        external_array = np.tile(np.arange(20), (3, 1)).T
        expected_result = np.array(
            [
                5.15766466e-01,
                1.27531471e00,
                5.19229430e00,
                1.22667052e01,
                2.24985475e01,
                3.58878212e01,
                5.24345262e01,
                7.21386625e01,
                9.50002302e01,
                1.21019229e02,
                1.50195660e02,
                1.82529521e02,
                2.18020814e02,
                2.56669539e02,
                2.98475695e02,
                3.43439282e02,
                3.91560300e02,
                4.42838750e02,
                4.97274631e02,
                5.54867944e02,
            ]
        )
        foo = test_instance_nD.calc_distances(external_array)
        assert np.allclose(foo, expected_result) == True


class Test_nD_integration_nan(arrays_factory):
    @pytest.fixture
    def test_instance_nD(self):

        input_array = self.get_nD_array()

        rand1 = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]
        rand2 = [32, 5, 14, 48, 18, 20, 24]
        rand3 = [35, 4, 5, 38, 40, 9, 10, 11, 15, 28]

        input_array[tuple(rand1), 0] = np.nan
        input_array[tuple(rand2), 1] = np.nan
        input_array[tuple(rand3), 2] = np.nan

        test_instance = Mahalanobis(input_array, 8)
        yield test_instance
        del test_instance

    def test_integration_nD_array_nans(self, test_instance_nD):
        expected_result = np.array(
            [
                7.86296059e-01,
                8.25258350e-01,
                5.90420300e-02,
                2.43922563e-01,
                1.14618451e-01,
                6.17790862e-02,
                7.43000226e-01,
                1.66083234e-01,
                2.77590192e00,
                np.nan,
                np.nan,
                np.nan,
                3.79729469e00,
                5.27019675e00,
                np.nan,
                np.nan,
                3.05879855e00,
                np.nan,
                np.nan,
                1.90640057e01,
                np.nan,
                6.51222641e01,
                9.20541043e00,
                2.15014318e01,
                np.nan,
                9.24655762e01,
                np.nan,
                np.nan,
                np.nan,
                np.nan,
                8.32180703e01,
                5.62592532e01,
                np.nan,
                1.54167733e02,
                9.25987847e01,
                np.nan,
                np.nan,
                7.01307796e01,
                np.nan,
                1.03865681e02,
                np.nan,
                1.79585868e02,
                1.09832993e02,
                3.81814167e02,
                2.14527899e02,
                1.11567197e02,
                2.91426915e02,
                1.79698833e02,
                np.nan,
                1.74859169e02,
            ]
        )
        assert np.allclose(test_instance_nD.distances, expected_result, equal_nan=True) == True


class Test_1D_integration(arrays_factory):
    @pytest.fixture
    def test_instance_1D(self):
        test_instance = Mahalanobis(self.get_1D_array(), 8)
        yield test_instance
        del test_instance


    def test_integration_1D_array(self, test_instance_1D):
        expected_result = np.array(
            [
                1.80973622e-01,
                3.13457624e-01,
                6.09042980e-03,
                4.13750950e-02,
                5.25530169e-02,
                1.99277537e-01,
                1.77414398e-01,
                2.88582785e-02,
                1.89778615e-01,
                3.42253974e00,
                3.70081638e00,
                1.26209947e00,
                1.40774362e00,
                2.40092213e00,
                1.59530306e-01,
                1.93629605e-01,
                7.96614142e-02,
                2.95505236e-01,
                9.50906918e00,
                1.70519869e00,
                1.88714334e01,
                1.07107171e01,
                8.30487881e-01,
                8.74719987e-01,
                6.10945179e00,
                1.46918256e01,
                1.10470088e01,
                1.88047269e01,
                4.33528532e00,
                1.63790543e01,
                7.86215267e00,
                1.66190948e01,
                1.76487847e01,
                1.98219420e01,
                2.83087017e01,
                2.52277720e01,
                3.35252281e01,
                3.64961170e-02,
                2.22092513e01,
                2.47868311e01,
                1.42971564e01,
                1.34661599e01,
                2.27855705e01,
                5.23492033e01,
                5.44444365e01,
                5.48771719e-01,
                2.43866977e01,
                3.61971713e00,
                7.48298533e01,
                2.09954912e01,
            ]
        )

        assert np.allclose(test_instance_1D.distances, expected_result) is True


class Test_1D_integration_nan(arrays_factory):
    @pytest.fixture
    def test_instance_1D_with_nans(self):

        input_array = self.get_1D_array()

        rand = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]

        input_array[rand] = np.nan

        test_instance = Mahalanobis(input_array, 8)
        yield test_instance
        del test_instance

    def test_integration_1D_array_nans(self, test_instance_1D_with_nans):
        expected_result = np.array(
            [
                1.81618104e-01,
                3.35132101e-01,
                1.44556776e-03,
                3.02728553e-02,
                1.00786335e-01,
                1.44556776e-03,
                2.86783364e-01,
                6.25161055e-02,
                1.91653604e-01,
                np.nan,
                4.52907661e00,
                np.nan,
                1.97350917e00,
                3.30208417e00,
                1.57319852e-01,
                1.96052457e-01,
                1.42635680e-01,
                np.nan,
                np.nan,
                2.03420881e00,
                2.37901748e01,
                1.33991757e01,
                1.19299292e00,
                1.01067075e00,
                np.nan,
                1.84634270e01,
                np.nan,
                np.nan,
                np.nan,
                np.nan,
                9.78440145e00,
                2.19756421e01,
                np.nan,
                2.50026220e01,
                3.72201916e01,
                3.19038817e01,
                np.nan,
                2.55810035e-02,
                2.92711629e01,
                3.26315352e01,
                1.89413001e01,
                1.69031105e01,
                3.00226730e01,
                6.66122446e01,
                7.12103487e01,
                8.07383483e-01,
                3.08295771e01,
                4.42718079e00,
                9.54359126e01,
                2.76881000e01,
            ]
        )

        assert np.allclose(test_instance_1D_with_nans.distances, expected_result, equal_nan=True) is True


class Test_1D_integration_sparse_calibration:
    @pytest.fixture
    def test_instance_1D_sparse_calibration(self):
        test_instance = Mahalanobis(np.arange(20), [0, 1, 2, 17, 18, 19])
        yield test_instance
        del test_instance


    def test_integration_1D_array_sparse_fngerprinting(self, test_instance_1D_sparse_calibration):
        expected_result = np.array(
            [
                0.20628571,
                0.16514286,
                0.12857143,
                0.09657143,
                0.06914286,
                0.04628571,
                0.028,
                0.01428571,
                0.00514286,
                0.00057143,
                0.00057143,
                0.00514286,
                0.01428571,
                0.028,
                0.04628571,
                0.06914286,
                0.09657143,
                0.12857143,
                0.16514286,
                0.20628571,
            ]
        )

        assert np.allclose(test_instance_1D_sparse_calibration.distances, expected_result) is True
