import pytest
import numpy as np
from mahalanobis import Mahalanobis


class arrays_factory:
    def get_1D_array(self):
        # y = x*(np.random.rand(len(x))-0.5)
        return np.array(
            [
                -0.0,
                0.34295646,
                -0.88598667,
                -0.56622871,
                -1.66973881,
                -2.22362131,
                -2.159349,
                -1.51831888,
                0.0260819,
                3.63353742,
                3.82161576,
                1.78035088,
                -4.11124013,
                -5.03711373,
                -0.06630831,
                0.03729869,
                -1.80491645,
                -2.47153322,
                6.78008604,
                2.24557543,
                9.99494215,
                7.2622585,
                -3.40939432,
                1.30041777,
                5.21927436,
                8.69126001,
                -9.56236032,
                9.97534216,
                -6.39565673,
                9.23736846,
                6.0666296,
                -11.48280422,
                -11.80007737,
                10.27055026,
                -14.65555404,
                11.72575387,
                13.68298596,
                -0.59777696,
                -13.10500669,
                -13.78337608,
                -10.72912663,
                8.27458674,
                -13.25996406,
                17.36900564,
                -19.90475806,
                -2.97447243,
                11.51039279,
                3.76755606,
                20.97843847,
                -12.77193982,
            ]
        )

    def get_nD_array(self):
        # x = np.arange(50)
        # y = 0.05*x**2 + 10*np.random.rand(len(x))-0.5
        dim1 = np.array(
            [
                1.24707662e00,
                8.13229998e00,
                3.94011671e00,
                5.95711000e-02,
                8.19151971e-01,
                2.42683945e00,
                9.82948142e00,
                2.60307426e00,
                3.70308373e00,
                1.18574991e01,
                5.49522144e00,
                1.47371303e01,
                1.42054341e01,
                1.43085060e01,
                1.70986614e01,
                1.72295762e01,
                1.76510457e01,
                2.07641508e01,
                1.65682761e01,
                1.98844646e01,
                2.49628808e01,
                2.31695871e01,
                3.17272266e01,
                3.28116587e01,
                3.03590339e01,
                3.31774992e01,
                3.64844535e01,
                3.79213745e01,
                4.43058815e01,
                4.25157391e01,
                5.12775150e01,
                5.50997437e01,
                5.86550154e01,
                5.90056339e01,
                6.72426047e01,
                6.59205602e01,
                6.97840117e01,
                7.60038959e01,
                8.12967386e01,
                8.36072157e01,
                8.77854012e01,
                8.47615125e01,
                9.03520900e01,
                9.47096869e01,
                1.03496443e02,
                1.01762158e02,
                1.07894466e02,
                1.09683918e02,
                1.22511127e02,
                1.23245054e02,
            ]
        )

        # y = np.sqrt(x) + np.random.rand(len(x))-0.5
        dim2 = np.array(
            [
                -0.31499221,
                1.05671006,
                1.28888535,
                1.77858885,
                1.69954581,
                2.09680701,
                2.35062093,
                2.18256544,
                3.17286042,
                3.41881569,
                3.07845131,
                3.03240567,
                2.97101653,
                3.67681743,
                3.61480066,
                4.09780359,
                3.7228853,
                3.72750352,
                4.3321444,
                4.31290794,
                4.48195774,
                4.52144904,
                4.37120091,
                4.34752525,
                4.59769903,
                4.76832962,
                4.71199936,
                5.27308146,
                4.97553506,
                5.05182084,
                5.18196372,
                5.32240197,
                5.21674972,
                5.48668311,
                6.16344126,
                5.43269478,
                5.59503976,
                6.01893802,
                6.18506432,
                6.70173019,
                6.73045925,
                6.43085774,
                6.90732197,
                6.19020802,
                6.23026284,
                6.30474967,
                6.5228214,
                6.54970738,
                6.6658426,
                7.38755013,
            ]
        )

        # y = x*(np.random.rand(len(x))-0.5)
        dim3 = np.array(
            [
                -0.0,
                0.34295646,
                -0.88598667,
                -0.56622871,
                -1.66973881,
                -2.22362131,
                -2.159349,
                -1.51831888,
                0.0260819,
                3.63353742,
                3.82161576,
                1.78035088,
                -4.11124013,
                -5.03711373,
                -0.06630831,
                0.03729869,
                -1.80491645,
                -2.47153322,
                6.78008604,
                2.24557543,
                9.99494215,
                7.2622585,
                -3.40939432,
                1.30041777,
                5.21927436,
                8.69126001,
                -9.56236032,
                9.97534216,
                -6.39565673,
                9.23736846,
                6.0666296,
                -11.48280422,
                -11.80007737,
                10.27055026,
                -14.65555404,
                11.72575387,
                13.68298596,
                -0.59777696,
                -13.10500669,
                -13.78337608,
                -10.72912663,
                8.27458674,
                -13.25996406,
                17.36900564,
                -19.90475806,
                -2.97447243,
                11.51039279,
                3.76755606,
                20.97843847,
                -12.77193982,
            ]
        )
        return np.vstack((dim1, dim2, dim3)).T


class Test_nD_integration(arrays_factory):
    @pytest.fixture
    def test_instance_nD(self):
        test_instance = Mahalanobis(self.get_nD_array(), 8)
        yield test_instance
        del test_instance

    def test_integration_nD_array(self, test_instance_nD):

        expected_result = [
            [2.44055645],
            [2.23880391],
            [0.325464],
            [1.98056796],
            [1.1126981],
            [1.36655124],
            [2.20047948],
            [1.02722722],
            [5.08768697],
            [11.41952027],
            [11.32793738],
            [7.74938988],
            [5.03130692],
            [5.70649451],
            [6.23176902],
            [7.13428793],
            [4.84086483],
            [5.44057625],
            [18.41885873],
            [10.94070603],
            [24.26560733],
            [19.6406851],
            [8.76285502],
            [11.40984349],
            [16.82272743],
            [22.84070973],
            [15.68989057],
            [26.01418224],
            [13.95599462],
            [24.82190691],
            [21.42522215],
            [22.05563798],
            [23.46447298],
            [28.74656828],
            [28.24410231],
            [31.65223332],
            [35.19830984],
            [22.20446904],
            [29.9938304],
            [30.88258338],
            [29.01293584],
            [31.48243772],
            [31.99468862],
            [44.52923548],
            [44.04297184],
            [29.69530982],
            [39.77612913],
            [33.68668003],
            [54.18950225],
            [40.6755418],
        ]

        test_instance_nD()
        assert np.allclose(test_instance_nD.distances, expected_result) == True

    def test_integration_external_nD_array(self, test_instance_nD):
        external_array = np.tile(np.arange(20), (3, 1)).T
        expected_result = np.array(
            [
                2.03128819,
                3.19413802,
                6.44502556,
                9.90624257,
                13.41597482,
                16.94410132,
                20.48111836,
                24.0230993,
                27.56813091,
                31.11517048,
                34.66360162,
                38.21303666,
                41.76321965,
                45.31397479,
                48.86517735,
                52.4167364,
                55.96858407,
                59.52066869,
                63.07295023,
                66.62539719,
            ]
        )

        assert np.allclose(test_instance_nD.calc_distances(external_array), expected_result.reshape(-1, 1)) == True


class Test_nD_integration_nan(arrays_factory):
    @pytest.fixture
    def test_instance_nD(self):

        input_array = self.get_nD_array()

        rand1 = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]
        rand2 = [32, 5, 14, 48, 18, 20, 24]
        rand3 = [35, 4, 5, 38, 40, 9, 10, 11, 15, 28]

        input_array[tuple(rand1), 0] = np.nan
        input_array[tuple(rand2), 1] = np.nan
        input_array[tuple(rand3), 2] = np.nan

        test_instance = Mahalanobis(input_array, 8)
        yield test_instance
        del test_instance

    def test_integration_nD_array_nans(self, test_instance_nD):
        expected_result = np.array(
            [
                2.5080607,
                2.56944873,
                0.68726723,
                1.39691822,
                0.95757381,
                0.70301685,
                2.43803236,
                1.1526777,
                4.71245322,
                np.nan,
                np.nan,
                np.nan,
                5.51165651,
                6.49319444,
                np.nan,
                np.nan,
                4.94675534,
                np.nan,
                np.nan,
                12.34957675,
                np.nan,
                22.82494497,
                8.58156649,
                13.11531374,
                np.nan,
                27.19787877,
                np.nan,
                np.nan,
                np.nan,
                np.nan,
                25.80202632,
                21.21494816,
                np.nan,
                35.11896731,
                27.21746273,
                np.nan,
                np.nan,
                23.6864146,
                np.nan,
                28.82577743,
                np.nan,
                37.9036534,
                29.64226616,
                55.26765183,
                41.42732424,
                29.87536739,
                48.28473177,
                37.91557289,
                np.nan,
                37.40151539,
            ]
        )
        test_instance_nD()
        assert np.allclose(test_instance_nD.distances, expected_result.reshape(-1, 1), equal_nan=True) == True


class Test_1D_integration(arrays_factory):
    @pytest.fixture
    def test_instance_1D(self):
        test_instance = Mahalanobis(self.get_1D_array().reshape(-1, 1), 8)
        yield test_instance
        del test_instance

    def test_integration_1D_array(self, test_instance_1D):
        expected_result = np.array(
            [
                1.20324103,
                1.58355959,
                0.22073386,
                0.57532666,
                0.64840121,
                1.26262437,
                1.19135015,
                0.48048541,
                1.23216432,
                5.23262056,
                5.44118839,
                3.17754556,
                3.35588274,
                4.38262217,
                1.12970901,
                1.24460308,
                0.79830528,
                1.53754411,
                8.72195812,
                3.69345225,
                12.28704467,
                9.25665905,
                2.57757697,
                2.64532794,
                6.99110966,
                10.84133777,
                9.40085478,
                12.26530944,
                5.88916654,
                11.44693996,
                7.93077684,
                11.53051424,
                11.88235152,
                12.59267788,
                15.04890739,
                14.20641319,
                16.37686859,
                0.5403415,
                13.32944148,
                14.08171328,
                10.69473007,
                10.3792716,
                13.5012801,
                20.46444786,
                20.86996626,
                2.09527415,
                13.9675904,
                5.38123936,
                24.46709682,
                12.96008989,
            ]
        )
        test_instance_1D()
        assert np.allclose(test_instance_1D.distances, expected_result.reshape(-1, 1)) is True


class Test_1D_integration_nan(arrays_factory):
    @pytest.fixture
    def test_instance_1D_with_nans(self):

        input_array = self.get_1D_array().reshape(-1, 1)

        rand = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]

        input_array[rand] = np.nan

        test_instance = Mahalanobis(input_array, 8)
        yield test_instance
        del test_instance

    def test_integration_1D_array_nans(self, test_instance_1D_with_nans):
        expected_result = np.array(
            [
                1.20538161,
                1.6373933,
                0.10753856,
                0.49212076,
                0.8979369,
                0.10753856,
                1.51468377,
                0.70719788,
                1.23823618,
                np.nan,
                6.0193532,
                np.nan,
                3.97342086,
                5.1397153,
                1.12185508,
                1.25236562,
                1.06821601,
                np.nan,
                np.nan,
                4.03406377,
                13.79570218,
                10.35342481,
                3.08932733,
                2.8434778,
                np.nan,
                12.15349397,
                np.nan,
                np.nan,
                np.nan,
                np.nan,
                8.84732794,
                13.25915294,
                np.nan,
                14.14287722,
                17.2557681,
                15.97595235,
                np.nan,
                0.4523804,
                15.30259139,
                16.1571124,
                12.30976851,
                11.62862349,
                15.49778641,
                23.08458267,
                23.86802861,
                2.54146963,
                15.70466864,
                5.95125586,
                27.63127396,
                14.88303732,
            ]
        )
        test_instance_1D_with_nans()
        assert np.allclose(test_instance_1D_with_nans.distances, expected_result.reshape(-1, 1), equal_nan=True) is True


class Test_1D_integration_sparse_calibration:
    @pytest.fixture
    def test_instance_1D_sparse_calibration(self):
        test_instance = Mahalanobis(np.arange(20).reshape(-1, 1), [0, 1, 2, 17, 18, 19])
        yield test_instance
        del test_instance

    def test_integration_1D_array_sparse_fngerprinting(self, test_instance_1D_sparse_calibration):
        expected_result = np.array(
            [
                1.11252608,
                0.99541807,
                0.87831007,
                0.76120206,
                0.64409405,
                0.52698604,
                0.40987803,
                0.29277002,
                0.17566201,
                0.058554,
                0.058554,
                0.17566201,
                0.29277002,
                0.40987803,
                0.52698604,
                0.64409405,
                0.76120206,
                0.87831007,
                0.99541807,
                1.11252608,
            ]
        )
        test_instance_1D_sparse_calibration()
        assert np.allclose(test_instance_1D_sparse_calibration.distances, expected_result.reshape(-1, 1)) is True
