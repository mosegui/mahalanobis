import pytest
import unittest
import numpy as np
from mahalanobis import Mahalanobis


def get_nD_array():
    # x = np.arange(50)
    # foo1 = 0.05*x**2 + 10*np.random.rand(len(x))-0.5
    dim1 = np.array([1.24707662e+00, 8.13229998e+00, 3.94011671e+00, 5.95711000e-02,
                     8.19151971e-01, 2.42683945e+00, 9.82948142e+00, 2.60307426e+00,
                     3.70308373e+00, 1.18574991e+01, 5.49522144e+00, 1.47371303e+01,
                     1.42054341e+01, 1.43085060e+01, 1.70986614e+01, 1.72295762e+01,
                     1.76510457e+01, 2.07641508e+01, 1.65682761e+01, 1.98844646e+01,
                     2.49628808e+01, 2.31695871e+01, 3.17272266e+01, 3.28116587e+01,
                     3.03590339e+01, 3.31774992e+01, 3.64844535e+01, 3.79213745e+01,
                     4.43058815e+01, 4.25157391e+01, 5.12775150e+01, 5.50997437e+01,
                     5.86550154e+01, 5.90056339e+01, 6.72426047e+01, 6.59205602e+01,
                     6.97840117e+01, 7.60038959e+01, 8.12967386e+01, 8.36072157e+01,
                     8.77854012e+01, 8.47615125e+01, 9.03520900e+01, 9.47096869e+01,
                     1.03496443e+02, 1.01762158e+02, 1.07894466e+02, 1.09683918e+02,
                     1.22511127e+02, 1.23245054e+02])

    # np.sqrt(x) + np.random.rand(len(x))-0.5
    dim2 = np.array([-0.31499221,  1.05671006,  1.28888535,  1.77858885,  1.69954581,
                     2.09680701,  2.35062093,  2.18256544,  3.17286042,  3.41881569,
                     3.07845131,  3.03240567,  2.97101653,  3.67681743,  3.61480066,
                     4.09780359,  3.7228853 ,  3.72750352,  4.3321444 ,  4.31290794,
                     4.48195774,  4.52144904,  4.37120091,  4.34752525,  4.59769903,
                     4.76832962,  4.71199936,  5.27308146,  4.97553506,  5.05182084,
                     5.18196372,  5.32240197,  5.21674972,  5.48668311,  6.16344126,
                     5.43269478,  5.59503976,  6.01893802,  6.18506432,  6.70173019,
                     6.73045925,  6.43085774,  6.90732197,  6.19020802,  6.23026284,
                     6.30474967,  6.5228214 ,  6.54970738,  6.6658426 ,  7.38755013])

    # y = x*(np.random.rand(len(x))-0.5)
    dim3 = np.array([ -0.        ,  0.34295646,   -0.88598667,   -0.56622871,
                      -1.66973881,  -2.22362131,  -2.159349  ,   -1.51831888,
                      0.0260819 ,   3.63353742,   3.82161576,    1.78035088,
                      -4.11124013,  -5.03711373,  -0.06630831,   0.03729869,
                      -1.80491645,  -2.47153322,  6.78008604,    2.24557543,
                      9.99494215,   7.2622585 ,   -3.40939432,   1.30041777,
                      5.21927436,   8.69126001,   -9.56236032,   9.97534216,
                      -6.39565673,  9.23736846,   6.0666296,     -11.48280422,
                      -11.80007737, 10.27055026,  -14.65555404,  11.72575387,
                      13.68298596,  -0.59777696,  -13.10500669,  -13.78337608,
                      -10.72912663, 8.27458674,   -13.25996406,  17.36900564,
                      -19.90475806, -2.97447243,  11.51039279,   3.76755606,
                      20.97843847,  -12.77193982])
    return np.vstack((dim1, dim2, dim3)).T

def get_1D_array():
    # y = x*(np.random.rand(len(x))-0.5)
    return np.array([-0., 0.34295646, -0.88598667, -0.56622871,
                     -1.66973881, -2.22362131, -2.159349, -1.51831888,
                     0.0260819, 3.63353742, 3.82161576, 1.78035088,
                     -4.11124013, -5.03711373, -0.06630831, 0.03729869,
                     -1.80491645, -2.47153322, 6.78008604, 2.24557543,
                     9.99494215, 7.2622585, -3.40939432, 1.30041777,
                     5.21927436, 8.69126001, -9.56236032, 9.97534216,
                     -6.39565673, 9.23736846, 6.0666296, -11.48280422,
                     -11.80007737, 10.27055026, -14.65555404, 11.72575387,
                     13.68298596, -0.59777696, -13.10500669, -13.78337608,
                     -10.72912663, 8.27458674, -13.25996406, 17.36900564,
                     -19.90475806, -2.97447243, 11.51039279, 3.76755606,
                     20.97843847, -12.77193982])



@pytest.fixture
def test_instance_nD():
    test_instance = Mahalanobis(get_nD_array(), 8)
    yield test_instance
    del test_instance


def test_integration_nD_array(test_instance_nD):

    expected_result = [7.44539472e-01, 6.26530367e-01, 1.32408522e-02, 4.90331182e-01,
                       1.54762131e-01, 2.33432786e-01, 6.05263740e-01, 1.31899469e-01,
                       3.23556984e+00, 1.63006804e+01, 1.60402706e+01, 7.50663043e+00,
                       3.16425617e+00, 4.07050995e+00, 4.85436813e+00, 6.36225803e+00,
                       2.92924653e+00, 3.69998375e+00, 4.24067946e+01, 1.49623811e+01,
                       7.36024624e+01, 4.82195639e+01, 9.59845352e+00, 1.62730661e+01,
                       3.53755198e+01, 6.52122526e+01, 3.07715833e+01, 8.45922097e+01,
                       2.43462232e+01, 7.70158828e+01, 5.73800180e+01, 6.08063958e+01,
                       6.88226865e+01, 1.03295649e+02, 9.97161644e+01, 1.25232984e+02,
                       1.54865127e+02, 6.16298056e+01, 1.12453733e+02, 1.19216745e+02,
                       1.05218806e+02, 1.23892986e+02, 1.27957512e+02, 2.47856602e+02,
                       2.42472921e+02, 1.10226428e+02, 1.97767556e+02, 1.41849051e+02,
                       3.67062769e+02, 2.06812463e+02]

    assert np.allclose(test_instance_nD.calc_dists_set(), expected_result) == True

def test_integration_external_nD_array(test_instance_nD):
    test_instance_nD.calc_mean()
    test_instance_nD.calc_cov_matrix()
    external_array = np.tile(np.arange(20), (3, 1)).T
    expected_result = np.array([5.15766466e-01, 1.27531471e+00, 5.19229430e+00, 1.22667052e+01,
                                2.24985475e+01, 3.58878212e+01, 5.24345262e+01, 7.21386625e+01,
                                9.50002302e+01, 1.21019229e+02, 1.50195660e+02, 1.82529521e+02,
                                2.18020814e+02, 2.56669539e+02, 2.98475695e+02, 3.43439282e+02,
                                3.91560300e+02, 4.42838750e+02, 4.97274631e+02, 5.54867944e+02])

    assert np.allclose(test_instance_nD.calc_dists_array(external_array), expected_result) == True


@pytest.fixture
def test_instance_nD_with_nans():
    test_instance = Mahalanobis(get_nD_array(), 8)
    yield test_instance
    del test_instance

def test_integration_nD_array_nans(test_instance_nD_with_nans):
    rand1 = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]
    rand2 = [32, 5, 14, 48, 18, 20, 24]
    rand3 = [35, 4, 5, 38, 40, 9, 10, 11, 15, 28]

    test_instance_nD_with_nans.array[tuple(rand1), 0] = np.nan
    test_instance_nD_with_nans.array[tuple(rand2), 1] = np.nan
    test_instance_nD_with_nans.array[tuple(rand3), 2] = np.nan

    expected_result = np.array([7.86296059e-01, 8.25258350e-01, 5.90420300e-02, 2.43922563e-01,
                           1.14618451e-01, 6.17790862e-02, 7.43000226e-01, 1.66083234e-01,
                           2.77590192e+00,         np.nan,         np.nan,         np.nan,
                           3.79729469e+00, 5.27019675e+00,         np.nan,         np.nan,
                           3.05879855e+00,         np.nan,         np.nan, 1.90640057e+01,
                                   np.nan, 6.51222641e+01, 9.20541043e+00, 2.15014318e+01,
                                   np.nan, 9.24655762e+01,         np.nan,         np.nan,
                                   np.nan,         np.nan, 8.32180703e+01, 5.62592532e+01,
                                   np.nan, 1.54167733e+02, 9.25987847e+01,         np.nan,
                                   np.nan, 7.01307796e+01,         np.nan, 1.03865681e+02,
                                   np.nan, 1.79585868e+02, 1.09832993e+02, 3.81814167e+02,
                           2.14527899e+02, 1.11567197e+02, 2.91426915e+02, 1.79698833e+02,
                                   np.nan, 1.74859169e+02])

    assert np.allclose(test_instance_nD_with_nans.calc_dists_set(), expected_result, equal_nan=True) == True


@pytest.fixture
def test_instance_1D():
    test_instance = Mahalanobis(get_1D_array(), 8)
    yield test_instance
    del test_instance

def test_integration_1D_array(test_instance_1D):
    expected_result = np.array([1.80973622e-01, 3.13457624e-01, 6.09042980e-03, 4.13750950e-02,
                                5.25530169e-02, 1.99277537e-01, 1.77414398e-01, 2.88582785e-02,
                                1.89778615e-01, 3.42253974e+00, 3.70081638e+00, 1.26209947e+00,
                                1.40774362e+00, 2.40092213e+00, 1.59530306e-01, 1.93629605e-01,
                                7.96614142e-02, 2.95505236e-01, 9.50906918e+00, 1.70519869e+00,
                                1.88714334e+01, 1.07107171e+01, 8.30487881e-01, 8.74719987e-01,
                                6.10945179e+00, 1.46918256e+01, 1.10470088e+01, 1.88047269e+01,
                                4.33528532e+00, 1.63790543e+01, 7.86215267e+00, 1.66190948e+01,
                                1.76487847e+01, 1.98219420e+01, 2.83087017e+01, 2.52277720e+01,
                                3.35252281e+01, 3.64961170e-02, 2.22092513e+01, 2.47868311e+01,
                                1.42971564e+01, 1.34661599e+01, 2.27855705e+01, 5.23492033e+01,
                                5.44444365e+01, 5.48771719e-01, 2.43866977e+01, 3.61971713e+00,
                                7.48298533e+01, 2.09954912e+01])

    assert np.allclose(test_instance_1D.calc_dists_set(), expected_result) is True


@pytest.fixture
def test_instance_1D_with_nans():
    test_instance = Mahalanobis(get_1D_array(), 8)
    yield test_instance
    del test_instance

def test_integration_1D_array_nans(test_instance_1D_with_nans):
    rand = [32, 2, 36, 5, 9, 11, 17, 18, 24, 26, 27, 28, 29]

    test_instance_1D_with_nans.array[rand] = np.nan

    expected_result = np.array([1.81618104e-01, 3.35132101e-01, 1.44556776e-03, 3.02728553e-02,
                                1.00786335e-01, 1.44556776e-03, 2.86783364e-01, 6.25161055e-02,
                                1.91653604e-01,         np.nan, 4.52907661e+00,         np.nan,
                                1.97350917e+00, 3.30208417e+00, 1.57319852e-01, 1.96052457e-01,
                                1.42635680e-01,         np.nan,         np.nan, 2.03420881e+00,
                                2.37901748e+01, 1.33991757e+01, 1.19299292e+00, 1.01067075e+00,
                                        np.nan, 1.84634270e+01,         np.nan,         np.nan,
                                        np.nan,         np.nan, 9.78440145e+00, 2.19756421e+01,
                                        np.nan, 2.50026220e+01, 3.72201916e+01, 3.19038817e+01,
                                        np.nan, 2.55810035e-02, 2.92711629e+01, 3.26315352e+01,
                                1.89413001e+01, 1.69031105e+01, 3.00226730e+01, 6.66122446e+01,
                                7.12103487e+01, 8.07383483e-01, 3.08295771e+01, 4.42718079e+00,
                                9.54359126e+01, 2.76881000e+01])

    assert np.allclose(test_instance_1D_with_nans.calc_dists_set(), expected_result, equal_nan=True) is True


@pytest.fixture
def test_instance_1D_sparse_calibration():
    test_instance = Mahalanobis(np.arange(20), [0, 1, 2, 17, 18, 19])
    yield test_instance
    del test_instance

def test_integration_1D_array_sparse_fngerprinting(test_instance_1D_sparse_calibration):
    expected_result = np.array([0.20628571, 0.16514286, 0.12857143, 0.09657143, 0.06914286,
                                0.04628571, 0.028     , 0.01428571, 0.00514286, 0.00057143,
                                0.00057143, 0.00514286, 0.01428571, 0.028     , 0.04628571,
                                0.06914286, 0.09657143, 0.12857143, 0.16514286, 0.20628571])

    assert np.allclose(test_instance_1D_sparse_calibration.calc_dists_set(), expected_result) is True
